[Last edit @ 12:00 by litiales]
Ho sistemato l'implementazione della mknod implementando anche il tipo di errore incontrato. Quest'ultimo per bypassare l'impossibilita' di passare interi per riferimento viene inserito in una classe wrappper (IntWrapper) nel campo value.
Ho implementato parzialmente anche la funzione fuse in C.
Ho ripulito il codice evidenziando le funzioni principali:
openDB-> apre (o crea) il database
initialize-> da chiamare solo quando il database e' stato appena creato per popolarlo
ls-> effettua un deep ls del fs
close -> DA CHIAMARE SEMPRE PER CHIUDERE IL DB
Per pulire bene il database (ovvero dover ricrearlo da zero) per favore eliminare fisicamente la cartella test contenuta in OVirtualFileSystem.
Ho ripristinato la cartella global libs che conteneva libreria java necessarie.

[Last edit @ 01:12 by litiales]
Ho raggruppato le cartelle che potenzialmente sono inutili e che in una settimana verranno eliminate. Do' questo tempo per via delle dipendenze che, magari, non mi ricodo.
Ho implementato la funzione mknod e creato il progetto del driver vero e proprio in Driver. Il progetto e' stato creato con qteditor.
Domani (cioe' oggi) lavorero' su getattr e readdir.


[Last edit @ 18:35 by litiales]
La struttura del repo e' composta da due parti fondamentali:
- la parte orient che comprende, OVirtualFileSystem, blueprints-core e blueprints-orient-graph;
- la parte non orient che contiene tutto il resto (da sviluppare seriamente nei prossimi giorni).
Per quanto riguarda la parte db, quello che ho scritto io e' contenuto in OVirtualFileSystem, ed ha come dipendenza in compilazione gli altri due progetti citati sopra.
In sostanza e' possibile usare la classe test per effettuare dei semplici test. Per ora e' stata implementata una funzione che inizializza un database di prova locale, e costruisce una classe "browser" per navigare l'albero. Attualmente completo lo sviluppo della "mknod".


PS per modificare questo file aggiungere in alto le modifiche e quello che si intende modificare prossimamente, cosi' da non ingarbugliarci e da avere l'ultima modofica sempre in testa, seguendo la sintassi:

[Last edit @ ora by utente]
cambiamenti....

Per aggiungere invece richiesta chiarimenti/segnalazione errori/implementazioni alternative piu' efficienti usare dei delimitatori, tipo /* utente */ all'inizio del file cosi' che siano ben evidenti alla prima apertura e sia possibile riconoscere chi solleva l'obiezione.

Il lavoro in team e' bello se ci si aiuta e si collabora in maniera organizzata. 

Naturalmente e' possibile, e ben accetto, suggerire un'organizzazione di gestione diversa da quella sopra proposta.

Buon lavoro a tutti
